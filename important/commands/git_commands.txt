1. Первоначальные конфигурации
git config --global user.name 'имя_пользователя_github'
git config --global user.email 'ваша_электронная_почта'
git config --global color.diff 'auto'
git config --global color.status 'auto'
git config --global color.branch 'auto'
git config --global credential.helper store
git config --global push.default simple
git config --global core.autocrlf false
git config --global core.eol lf

2.Строчка подключающая tree:
git config --global alias.tree "log --oneline --decorate --all --graph"

3. Команды git
git status -- статус операции
git log -- лог действий
git tree -- дерево альтернатива статус и логу
git clone -- склонировать или загрузить с гит хаба себе на комп репозиторий, папку или файл
git add index.html -- добавить файл/папку index.html - это название файла или папки
git commit -m 'комментарий' -- создать коммит
git push -- запушить/залить коммит на сервер/репозиторий
git rm index.html -- удалиться при следующем коммите
git branch 'Названиеветки' -- (без кавычек) дать название альтернативной ветке мастер, главное в этот момент находитьсяв в первом коммите новой ветки илив середине ветки и новая ветка начнется от среднего моммита
git branch -d 'название ветки' -- (с кавычками) удалить ненужную ветку
git checkout 'названиеветки' -- (без кавычек) переход в нужную ветку по имени или в нужный коммит по номеру
git checkout -b 'название ветки' -- (с кавычками) создать новую ветку и сразу же дать ей название
git commit --amend - редактирование последнего коммита, то есть его названия (по факту делается новый коммит)
git merge названиеветки из которой прилетят изменения -- сливание веток (важно находиться в основной ветке)
git merge -- (2.59.31 видео) конфликт при слиянии веток и нужно в ручном режиме выбрать что оставить в одной и тойже стороке конфликт (править в самом файле) - в консоле пишет both modified
git reset HEAD~1 -- убирает/вытирает коммит, но оставляет изменения, которые можно увидеть через команду status (цифра - это сколько последних комимтов вы хотите убрать)
git revert номеркоммита-- создание еще новый коммит, который отменяет все действия и изменения в указаном нами коммите
git remote -- команда работает с удаленным репозиторием
git remote -v -- перечилсяет все удаленные репозитории 
git remote add названиеРепозитория ссылкаНаУдаленныйРепозитотрий -- создание удаленного репозитория, как правило название origin



fast-forward - способ merge, не нужно создавать новый коммит, когда сливаем ветки. По факту мы просто перевешивае ярлык (название ветки) на нужный нам коммит (можно делать если нет паралельных веток, а ответвление одно и просто пошел в верх)

###########################################
$ git init создание репозитория в папке проекта
$ git status
$ git add . добавление
$ git status
$ git commit -m "Init blog" сохранение
$ git tree
$ git remote add origi https://github.com/alexeykirlitsya/laravel_blog.git выбор репозитория на github
$ git remote show
$ git remote -v
$ git push -u origin master загрузка на github